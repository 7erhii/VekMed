const { Telegraf, Markup, Scenes, session } = require("telegraf");
const LocalSession = require("telegraf-session-local");
require("dotenv").config();
const fs = require("fs");
const path = "./users.json";

const bot = new Telegraf(process.env.BOT_TOKEN);

const localSession = new LocalSession({ database: 'session_db.json' });
bot.use(localSession.middleware());



function loadUserData() {
  try {
    return JSON.parse(fs.readFileSync(path, "utf8"));
  } catch (err) {
    console.error("Failed to read user data from file:", err);
    return {};
  }
}
function saveUserData(data) {
  try {
    fs.writeFileSync(path, JSON.stringify(data, null, 2), "utf8");
  } catch (err) {
    console.error("Failed to save user data to file:", err);
  }
}

const userData = loadUserData();

function checkOrUpdateUser(ctx) {
  const userId = ctx.from.id.toString();
  const now = new Date();
  if (!userData[userId]) {
    userData[userId] = {
      userLanguage: "",
      userName: [ctx.from.first_name],
      userDescription: [ctx.from.username || "No description"],
      entryDate: [now.toISOString()],
      userPhone: [ctx.from.phone_number || "No phone number"],
    };
  } else {
    const user = userData[userId];
    if (!user.userName.includes(ctx.from.first_name)) {
      user.userName.push(ctx.from.first_name);
    }
    if (ctx.from.username && !user.userDescription.includes(ctx.from.username)) {
      user.userDescription.push(ctx.from.username);
    }
    if (ctx.from.phone_number && !user.userPhone.includes(ctx.from.phone_number)) {
      user.userPhone.push(ctx.from.phone_number);
    }
    const lastEntry = new Date(user.entryDate[user.entryDate.length - 1]);
    const hoursDiff = Math.abs(now - lastEntry) / 36e5;
    if (hoursDiff > 24) {
      user.entryDate.push(now.toISOString());
    }
  }
  saveUserData(userData);
}

bot.start((ctx) => {
  checkOrUpdateUser(ctx);
  ctx.reply(
    "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose your language:",
    Markup.inlineKeyboard(
      [
        Markup.button.callback("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "UA"),
        Markup.button.callback("–†—É—Å—Å–∫–∏–π", "RU"),
        Markup.button.callback("English", "ENG"),
      ],
      { resize: true },
    ).oneTime(),
  );
});

bot.action(["UA", "RU", "ENG"], async (ctx) => {
  const userId = ctx.from.id.toString();
  const language = ctx.match[0];
  userData[userId].userLanguage = language;
  saveUserData(userData);

  const emojis = {
    form: "üìù",
    direct: "‚úâÔ∏è",
    group: "üë•",
    instagram: "üì∏",
    website: "üåê"
  };

  const descriptions = {
    UA: {
      form: `<b>${emojis.form} –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É</b>\n–Ø–∫—â–æ –≤–∏ –º–∞—î—Ç–µ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞—à—É —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏ —Ç–∞ –º–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è!\n`,
      direct: `<b>${emojis.direct} –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É</b>\n–ù–µ –∑–≤–æ–ª—ñ–∫–∞–π—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –Ω–∞—Å –Ω–∞–ø—Ä—è–º—É —á–µ—Ä–µ–∑ Telegram –¥–ª—è —à–≤–∏–¥–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!\n`,
      group: `<b>${emojis.group} –ù–∞—à–∞ Telegram –≥—Ä—É–ø–∞</b>\n–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏, —â–æ–± –∑–∞–ª–∏—à–∞—Ç–∏—Å—å —É –∫—É—Ä—Å—ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–æ–≤–∏–Ω —ñ –∞–∫—Ü—ñ–π!\n`,
      instagram: `<b>${emojis.instagram} Instagram</b>\n–í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ –Ω–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –≤ Instagram, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –Ω–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏ —Ç–∞ –Ω–æ–≤–∏–Ω–∏!\n`,
      website: `<b>${emojis.website} –ù–∞—à –≤–µ–±-—Å–∞–π—Ç</b>\n–í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ –Ω–∞—à —Å–∞–π—Ç, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó!\n`
    },
    RU: {
      form: `<b>${emojis.form} –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</b>\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—à—É —Ñ–æ—Ä–º—É, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!\n`,
      direct: `<b>${emojis.direct} –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é</b>\n–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑–∏!\n`,
      group: `<b>${emojis.group} –ù–∞—à–∞ Telegram –≥—Ä—É–ø–ø–∞</b>\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–∫—Ü–∏–π!\n`,
      instagram: `<b>${emojis.instagram} Instagram</b>\n–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ Instagram, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏!\n`,
      website: `<b>${emojis.website} –ù–∞—à –≤–µ–±-—Å–∞–π—Ç</b>\n–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö!\n`
    },
    ENG: {
      form: `<b>${emojis.form} Leave a request</b>\nIf you have specific requests or wishes, please fill out our request form and we will contact you!\n`,
      direct: `<b>${emojis.direct} Write to us directly</b>\nDo not hesitate to contact us directly via Telegram for a quick response!\n`,
      group: `<b>${emojis.group} Our Telegram group</b>\nJoin our group to stay updated with the latest news and promotions!\n`,
      instagram: `<b>${emojis.instagram} Instagram</b>\nVisit our Instagram profile to see our latest projects and news!\n`,
      website: `<b>${emojis.website} Our website</b>\nVisit our site to learn more and find out about current offers!\n`
    }
  };

  const chosenTexts = descriptions[language];

  await ctx.replyWithHTML(`‚¨áÔ∏è <b>Choose an option:</b>\n\n\n${chosenTexts.form}\n${chosenTexts.direct}\n${chosenTexts.group}\n${chosenTexts.instagram}\n${chosenTexts.website}`, Markup.inlineKeyboard([
    Markup.button.callback(`${emojis.form} Fill Form`, "FILL_FORM"),
    Markup.button.url(`${emojis.direct} Direct Contact`, "https://t.me/VekMedCare"),
    Markup.button.url(`${emojis.group} VekMed Channel`, "https://t.me/vekmed_ua"),
    Markup.button.url(`${emojis.instagram} Instagram`, "https://www.instagram.com/vekmed"),
    Markup.button.url(`${emojis.website} VekMed.com`, `https://www.vekmed.com/${language === "ENG" ? "en" : language.toLowerCase()}`)
  ], { columns: 1 }).resize());
});





const formScene = new Scenes.BaseScene('formScene');

formScene.enter((ctx) => {
  // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É
  ctx.session.name = undefined;
  ctx.session.message = undefined;
  ctx.session.contact = undefined;

  // –ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const userId = ctx.from.id.toString();
  const userLanguage = userData[userId] && userData[userId].userLanguage ? userData[userId].userLanguage : 'UA';

  const promptTexts = {
    UA: "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
    RU: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
    ENG: "Enter your name:"
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ctx.replyWithHTML(promptTexts[userLanguage]);
});

formScene.on('text', (ctx) => {
  const userId = ctx.from.id.toString();
  const userLanguage = userData[userId] && userData[userId].userLanguage ? userData[userId].userLanguage : 'UA';

  if (!ctx.session.name) {
    ctx.session.name = ctx.message.text;
    const messageTexts = {
      UA: "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:",
      RU: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:",
      ENG: "Enter your request:"
    };
    return ctx.replyWithHTML(messageTexts[userLanguage]);
  }

  if (!ctx.session.message) {
    ctx.session.message = ctx.message.text;
    const contactTexts = {
      UA: "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤'—è–∑–∫—É:",
      RU: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:",
      ENG: "Enter your contact information:"
    };
    return ctx.replyWithHTML(contactTexts[userLanguage]);
  }

  if (!ctx.session.contact) {
    ctx.session.contact = ctx.message.text;
    const dataConfirmationTexts = {
      UA: `–Ü–º'—è: ${ctx.session.name}\n–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è: ${ctx.session.message}\n–ö–æ–Ω—Ç–∞–∫—Ç: ${ctx.session.contact}\n\n–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ?`,
      RU: `–ò–º—è: ${ctx.session.name}\n–û–±—Ä–∞—â–µ–Ω–∏–µ: ${ctx.session.message}\n–ö–æ–Ω—Ç–∞–∫—Ç: ${ctx.session.contact}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?`,
      ENG: `Name: ${ctx.session.name}\nRequest: ${ctx.session.message}\nContact: ${ctx.session.contact}\n\nSubmit the information?`
    };
    ctx.replyWithHTML(dataConfirmationTexts[userLanguage], Markup.inlineKeyboard([
      Markup.button.callback(userLanguage === 'UA' ? "–¢–∞–∫, –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏" : userLanguage === 'RU' ? "–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" : "Yes, submit", "submit"),
      Markup.button.callback(userLanguage === 'UA' ? "–°–∫–∞—Å—É–≤–∞—Ç–∏" : userLanguage === 'RU' ? "–û—Ç–º–µ–Ω–∞" : "Cancel", "cancel")
    ]));
  }
});

formScene.action('submit', (ctx) => {
  const userId = ctx.from.id.toString();
  const userLanguage = userData[userId] && userData[userId].userLanguage ? userData[userId].userLanguage : 'UA';
  const data = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: ${ctx.session.name}\n–û–±—Ä–∞—â–µ–Ω–∏–µ: ${ctx.session.message}\n–ö–æ–Ω—Ç–∞–∫—Ç: ${ctx.session.contact}`;
  ctx.telegram.sendMessage(process.env.TARGET_GROUP_ID, data); // ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
  
  const submissionConfirmationTexts = {
    UA: "–í–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!",
    RU: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
    ENG: "Your request has been sent!"
  };
  ctx.reply(submissionConfirmationTexts[userLanguage]);
  ctx.scene.leave();
});

formScene.action('cancel', (ctx) => {
  const userId = ctx.from.id.toString();
  const userLanguage = userData[userId] && userData[userId].userLanguage ? userData[userId].userLanguage : 'UA';
  const cancelationTexts = {
    UA: "–°–∫–∞—Å–æ–≤–∞–Ω–æ",
    RU: "–û—Ç–º–µ–Ω–µ–Ω–æ",
    ENG: "Cancelled"
  };
  ctx.reply(cancelationTexts[userLanguage]);
  ctx.scene.leave();
});

const stage = new Scenes.Stage([formScene]);
bot.use(stage.middleware());

bot.action("FILL_FORM", (ctx) => {
  ctx.scene.enter('formScene');
});

bot.command('start', (ctx) => ctx.scene.enter('formScene'));


bot.launch();